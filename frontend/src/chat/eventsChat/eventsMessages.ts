import { ChatManager } from '../ChatManager';
//import { Message } from '../types';

export function eventsMessages(this: ChatManager) {

	this.on('newMessage', (message: any) => {
	    console.log('ğŸ“© New message received:', message);

	    // Si c'est un message privÃ©, gÃ©rer cÃ´tÃ© client
	    if (message.roomId?.startsWith('private_')) {
			// checker si l'utilisateur est bloquÃ©

			if ((this as any).state.currentUserId.blockedList.includes(message.userId)) {
				console.log('ğŸš« Message from blocked user ignored:', message.userId);
				// envoyer un message systeme Ã  l'utilisateur
				return;
			}

			if (message.userId !== (this as any).state.currentUserId?.id) {
				// Message privÃ© reÃ§u - crÃ©er/afficher la room automatiquement
	            (this as any).createAndShowPrivateRoom(message);

	        } else {
				// Message privÃ© envoyÃ© par nous - s'assurer que la room existe cÃ´tÃ© serveur
	            (this as any).handleOutgoingPrivateMessage(message);
	        }
	    }
		
	    // VÃ©rifier si le message appartient Ã  la room active
	    const currentRoom = (this as any).currentRoom?.id || (this as any).state?.activeTab;
	    if (message.roomId === currentRoom) {
			//this.addMessage(message);
	        this.messages.push(message);
	        (this as any).updateMessagesDisplay();
	    }

	    // IncrÃ©menter les non-lus si le chat est fermÃ© OU si pas dans la bonne room
	    if (!(this as any).state.isOpen || message.roomId !== currentRoom) {
	        (this as any).state.unreadCount++;
	        (this as any).updateNotificationBadge();
	    }

	});




}